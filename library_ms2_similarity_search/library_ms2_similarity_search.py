from argparse import ArgumentParser
import matplotlib.pyplot as plt
import numpy as np
import os
import pandas as pd
from matchms import Spectrum
from matchms.similarity import CosineGreedy

"""
This script searches the extracted MS2 spectral data from biological samples (.msp file) against the user-provided MS2 spectral library (.msp file). If the MS2 spectra from biological samples have been collected using the C18 positive method, select the MS2 spectral library generated by the same method. The script takes an input folder containing one or multiple spectral .msp files from biological samples, and generates  two types of output files: 
1) An excel spreadsheet summarizing the MS2 similarity search result for each metabolite at the collision energy that it has been collected. Expect spectral patterns to differ for the same metabolites collected at different collision energies. This document provides the top five matches based on the user-provided MS2 library, ranked based on their similarity scores.
2) A PDF file of mirror plots visually displaying the spectral patterns between each metabolite and its library match at the collision energy that it has been collected. This document provides the identical top five matches as shown in the summary excel spreadsheet, ranked based on their similarity scores. Expect to generate multiple PDF files corresponding to the multiple metabolites that are matched to the MS2 library.
"""

"""
python3 library_ms2_similarity_search.py input_folder_with_c18positive_msp_files --library_msp qTOF_c18positive_library.msp --mode c18positive --library mz-rt_library.xlsx
"""

def parse_ms2_file(file_path):
    entries = []

    with open(file_path, 'r') as file:
        line = file.readline()

        while line:
            tokens = line.split(':')

            if len(tokens) == 2:
                key, value = tokens

                if key == 'Name' or key == 'NAME':
                    entries.append({'peaks': []})

                entries[-1][key.strip()] = value.strip()
            else:
                tokens = line.split(',')

                if len(tokens) == 2:
                    mz, intensity = tokens
                    entries[-1]['peaks'].append((mz.strip(), intensity.strip()))

            line = file.readline()

    return entries

def entry_to_spectrum(entry):
    sorted_peaks = sorted(entry['peaks'], key=lambda peak: float(peak[0]))

    mzs, intensities = list(zip(*sorted_peaks))

    mzs = [float(mz) for mz in mzs]
    intensities = [float(intensity) for intensity in intensities]

    return Spectrum(mz=np.array(mzs),
                    intensities=np.array(intensities))

def plot_spectra(entry, library_entries):
    upper_mz, upper_intensity = list(zip(*entry['peaks']))
    upper_spectrum = { 'mz': list(map(float, upper_mz)), 'intensity': list(map(int, upper_intensity)) }

    fig, axs = plt.subplots(len(library_entries),
                            1,
                            squeeze=False,
                            figsize=(15, 9 * len(library_entries)))

    for idx, library_entry in enumerate(library_entries):
        ax = axs[idx, 0]

        lower_mz, lower_intensity = list(zip(*library_entry['peaks']))
        lower_spectrum = { 'mz': list(map(float, lower_mz)), 'intensity': list(map(int, lower_intensity)) }

        ax.stem(upper_spectrum['mz'],
                upper_spectrum['intensity'],
                linefmt='tab:blue',
                markerfmt='None',
                basefmt='None')

        ax.stem(lower_spectrum['mz'],
                np.array(lower_spectrum['intensity']) * -1,
                linefmt='tab:green',
                markerfmt='None',
                basefmt='None')

        ax.axhline(y=0, color='k', linewidth=1.0)

        ax.set_xlabel('m/z')
        ax.set_ylabel('Relative Intensity')

        ax.set_title(f"{entry['Name']} vs. {library_entry['Name']} (Score: {library_entry['similarity']}, Collision energy: {library_entry['Collision_energy']})")

    fig.tight_layout()

    fig.savefig(f"{entry['Name'].replace('/', '')}_energy_{entry['Collision_energy']}.pdf")
    plt.close(fig)

parser = ArgumentParser(description='Perform similarity searches on MoNA database using a directory of msp files')
parser.add_argument('directory', help='Path to directory of msp files')
parser.add_argument('--library_msp', help='Path to library msp file')
parser.add_argument('--mode', choices=['c18positive', 'c18negative', 'hilicpositive'], required=True)
parser.add_argument('--library', help='Path to compound library', required=True)

args = parser.parse_args()

chemical_info = pd.read_excel(args.library, sheet_name='chemical_info', engine='openpyxl')
chemical_info = chemical_info[chemical_info['mode'] == args.mode]
chemical_info = chemical_info.drop_duplicates('Compound').set_index('Compound')


library_entries = parse_ms2_file(args.library_msp)
library_spectra = [entry_to_spectrum(entry) for entry in library_entries]
cosine_greedy = CosineGreedy(tolerance=0.01)

results = []

for ms2_file in os.scandir(args.directory):
    ms2_file_path = ms2_file

    if not ms2_file.name.endswith('.msp'):
        continue

    print(f'Processing file {ms2_file.name}...\n')
    entries = parse_ms2_file(ms2_file_path)

    for entry in entries:
        print(entry)

        if entry['Collision_energy'] == '0':
            continue

        if entry['Num Peaks'] == '0':
            continue

        spectrum = entry_to_spectrum(entry)

        similarity_scores = [cosine_greedy.pair(spectrum, library_spectrum) for library_spectrum in library_spectra]
        similarity_scores = [int(round(score['score'] * 1000)) for score in similarity_scores]
        highest_score_indices = np.array(similarity_scores).argsort()[-5:][::-1]
        highest_score_library_entries = []

        for idx in highest_score_indices:

            library_entry = library_entries[idx]
            library_spectrum = library_spectra[idx]

            library_entry['similarity'] = similarity_scores[idx]

            highest_score_library_entries.append(library_entry)

            results.append({
                'sample_compound_name': entry['Name'],
                'sample_ce' : entry['Collision_energy'],
                'sample_mz' : entry['Precursor_mz'],
                'sample_filepath' : ms2_file.name,
                'library_compound' : library_entry['Name'],
                'library_ce' : library_entry['Collision_energy'],
                'ms2_similarity' : similarity_scores[idx]
            })

        plot_spectra(entry, highest_score_library_entries)

results = pd.DataFrame.from_records(results)

results = results.merge(chemical_info[['mz', 'rt', 'adduct', 'dname']], how='left', left_on='library_compound', right_index=True) \
    .rename(columns={'mz': 'library_mz', 'rt': 'library_rt', 'adduct': 'library_adduct', 'dname': 'library_dname'})

results.to_excel('library_ms2_similarity_search_results.xlsx')
